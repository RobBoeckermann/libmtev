/*
 * Generated by dtrace(1M).
 */

#ifndef	_LIBMTEV_DTRACE_PROBES_H
#define	_LIBMTEV_DTRACE_PROBES_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#if _DTRACE_VERSION

#define	LIBMTEV_EVENTER_ACCEPT_ENTRY(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_libmtev___eventer__accept__entry(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_ACCEPT_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__accept__entry()
#else
#define	LIBMTEV_EVENTER_ACCEPT_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__accept__entry(0)
#endif
#define	LIBMTEV_EVENTER_ACCEPT_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
	__dtrace_libmtev___eventer__accept__return(arg0, arg1, arg2, arg3, arg4, arg5)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_ACCEPT_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__accept__return()
#else
#define	LIBMTEV_EVENTER_ACCEPT_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__accept__return(0)
#endif
#define	LIBMTEV_EVENTER_CALLBACK_ENTRY(arg0, arg1, arg2, arg3, arg4, arg5) \
	__dtrace_libmtev___eventer__callback__entry(arg0, arg1, arg2, arg3, arg4, arg5)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_CALLBACK_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__callback__entry()
#else
#define	LIBMTEV_EVENTER_CALLBACK_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__callback__entry(0)
#endif
#define	LIBMTEV_EVENTER_CALLBACK_RETURN(arg0, arg1, arg2, arg3) \
	__dtrace_libmtev___eventer__callback__return(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_CALLBACK_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__callback__return()
#else
#define	LIBMTEV_EVENTER_CALLBACK_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__callback__return(0)
#endif
#define	LIBMTEV_EVENTER_CLOSE_ENTRY(arg0, arg1, arg2) \
	__dtrace_libmtev___eventer__close__entry(arg0, arg1, arg2)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_CLOSE_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__close__entry()
#else
#define	LIBMTEV_EVENTER_CLOSE_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__close__entry(0)
#endif
#define	LIBMTEV_EVENTER_CLOSE_RETURN(arg0, arg1, arg2, arg3) \
	__dtrace_libmtev___eventer__close__return(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_CLOSE_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__close__return()
#else
#define	LIBMTEV_EVENTER_CLOSE_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__close__return(0)
#endif
#define	LIBMTEV_EVENTER_READ_ENTRY(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_libmtev___eventer__read__entry(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_READ_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__read__entry()
#else
#define	LIBMTEV_EVENTER_READ_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__read__entry(0)
#endif
#define	LIBMTEV_EVENTER_READ_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
	__dtrace_libmtev___eventer__read__return(arg0, arg1, arg2, arg3, arg4, arg5)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_READ_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__read__return()
#else
#define	LIBMTEV_EVENTER_READ_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__read__return(0)
#endif
#define	LIBMTEV_EVENTER_WRITE_ENTRY(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_libmtev___eventer__write__entry(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_WRITE_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__write__entry()
#else
#define	LIBMTEV_EVENTER_WRITE_ENTRY_ENABLED() \
	__dtraceenabled_libmtev___eventer__write__entry(0)
#endif
#define	LIBMTEV_EVENTER_WRITE_RETURN(arg0, arg1, arg2, arg3, arg4, arg5) \
	__dtrace_libmtev___eventer__write__return(arg0, arg1, arg2, arg3, arg4, arg5)
#ifndef	__sparc
#define	LIBMTEV_EVENTER_WRITE_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__write__return()
#else
#define	LIBMTEV_EVENTER_WRITE_RETURN_ENABLED() \
	__dtraceenabled_libmtev___eventer__write__return(0)
#endif
#define	LIBMTEV_HTTP_ACCEPT(arg0, arg1) \
	__dtrace_libmtev___http__accept(arg0, arg1)
#ifndef	__sparc
#define	LIBMTEV_HTTP_ACCEPT_ENABLED() \
	__dtraceenabled_libmtev___http__accept()
#else
#define	LIBMTEV_HTTP_ACCEPT_ENABLED() \
	__dtraceenabled_libmtev___http__accept(0)
#endif
#define	LIBMTEV_HTTP_CLOSE(arg0, arg1) \
	__dtrace_libmtev___http__close(arg0, arg1)
#ifndef	__sparc
#define	LIBMTEV_HTTP_CLOSE_ENABLED() \
	__dtraceenabled_libmtev___http__close()
#else
#define	LIBMTEV_HTTP_CLOSE_ENABLED() \
	__dtraceenabled_libmtev___http__close(0)
#endif
#define	LIBMTEV_HTTP_LOG(arg0, arg1, arg2) \
	__dtrace_libmtev___http__log(arg0, arg1, arg2)
#ifndef	__sparc
#define	LIBMTEV_HTTP_LOG_ENABLED() \
	__dtraceenabled_libmtev___http__log()
#else
#define	LIBMTEV_HTTP_LOG_ENABLED() \
	__dtraceenabled_libmtev___http__log(0)
#endif
#define	LIBMTEV_HTTP_REQUEST_FINISH(arg0, arg1) \
	__dtrace_libmtev___http__request__finish(arg0, arg1)
#ifndef	__sparc
#define	LIBMTEV_HTTP_REQUEST_FINISH_ENABLED() \
	__dtraceenabled_libmtev___http__request__finish()
#else
#define	LIBMTEV_HTTP_REQUEST_FINISH_ENABLED() \
	__dtraceenabled_libmtev___http__request__finish(0)
#endif
#define	LIBMTEV_HTTP_REQUEST_START(arg0, arg1) \
	__dtrace_libmtev___http__request__start(arg0, arg1)
#ifndef	__sparc
#define	LIBMTEV_HTTP_REQUEST_START_ENABLED() \
	__dtraceenabled_libmtev___http__request__start()
#else
#define	LIBMTEV_HTTP_REQUEST_START_ENABLED() \
	__dtraceenabled_libmtev___http__request__start(0)
#endif
#define	LIBMTEV_HTTP_RESPONSE_FINISH(arg0, arg1) \
	__dtrace_libmtev___http__response__finish(arg0, arg1)
#ifndef	__sparc
#define	LIBMTEV_HTTP_RESPONSE_FINISH_ENABLED() \
	__dtraceenabled_libmtev___http__response__finish()
#else
#define	LIBMTEV_HTTP_RESPONSE_FINISH_ENABLED() \
	__dtraceenabled_libmtev___http__response__finish(0)
#endif
#define	LIBMTEV_HTTP_RESPONSE_START(arg0, arg1) \
	__dtrace_libmtev___http__response__start(arg0, arg1)
#ifndef	__sparc
#define	LIBMTEV_HTTP_RESPONSE_START_ENABLED() \
	__dtraceenabled_libmtev___http__response__start()
#else
#define	LIBMTEV_HTTP_RESPONSE_START_ENABLED() \
	__dtraceenabled_libmtev___http__response__start(0)
#endif
#define	LIBMTEV_LOG(arg0, arg1, arg2, arg3) \
	__dtrace_libmtev___log(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	LIBMTEV_LOG_ENABLED() \
	__dtraceenabled_libmtev___log()
#else
#define	LIBMTEV_LOG_ENABLED() \
	__dtraceenabled_libmtev___log(0)
#endif
#define	LIBMTEV_REVERSE_CONNECT(arg0, arg1, arg2) \
	__dtrace_libmtev___reverse__connect(arg0, arg1, arg2)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_CONNECT_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect()
#else
#define	LIBMTEV_REVERSE_CONNECT_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect(0)
#endif
#define	LIBMTEV_REVERSE_CONNECT_CLOSE(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_libmtev___reverse__connect__close(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_CONNECT_CLOSE_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__close()
#else
#define	LIBMTEV_REVERSE_CONNECT_CLOSE_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__close(0)
#endif
#define	LIBMTEV_REVERSE_CONNECT_FAILED(arg0, arg1, arg2, arg3) \
	__dtrace_libmtev___reverse__connect__failed(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_CONNECT_FAILED_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__failed()
#else
#define	LIBMTEV_REVERSE_CONNECT_FAILED_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__failed(0)
#endif
#define	LIBMTEV_REVERSE_CONNECT_SSL(arg0, arg1, arg2) \
	__dtrace_libmtev___reverse__connect__ssl(arg0, arg1, arg2)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_CONNECT_SSL_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__ssl()
#else
#define	LIBMTEV_REVERSE_CONNECT_SSL_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__ssl(0)
#endif
#define	LIBMTEV_REVERSE_CONNECT_SSL_FAILED(arg0, arg1, arg2, arg3, arg4) \
	__dtrace_libmtev___reverse__connect__ssl__failed(arg0, arg1, arg2, arg3, arg4)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_CONNECT_SSL_FAILED_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__ssl__failed()
#else
#define	LIBMTEV_REVERSE_CONNECT_SSL_FAILED_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__ssl__failed(0)
#endif
#define	LIBMTEV_REVERSE_CONNECT_SSL_SUCCESS(arg0, arg1, arg2) \
	__dtrace_libmtev___reverse__connect__ssl__success(arg0, arg1, arg2)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_CONNECT_SSL_SUCCESS_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__ssl__success()
#else
#define	LIBMTEV_REVERSE_CONNECT_SSL_SUCCESS_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__ssl__success(0)
#endif
#define	LIBMTEV_REVERSE_CONNECT_SUCCESS(arg0, arg1, arg2) \
	__dtrace_libmtev___reverse__connect__success(arg0, arg1, arg2)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_CONNECT_SUCCESS_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__success()
#else
#define	LIBMTEV_REVERSE_CONNECT_SUCCESS_ENABLED() \
	__dtraceenabled_libmtev___reverse__connect__success(0)
#endif
#define	LIBMTEV_REVERSE_RESCHEDULE(arg0, arg1, arg2, arg3) \
	__dtrace_libmtev___reverse__reschedule(arg0, arg1, arg2, arg3)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_RESCHEDULE_ENABLED() \
	__dtraceenabled_libmtev___reverse__reschedule()
#else
#define	LIBMTEV_REVERSE_RESCHEDULE_ENABLED() \
	__dtraceenabled_libmtev___reverse__reschedule(0)
#endif
#define	LIBMTEV_REVERSE_SHUTDOWN_PERMANENT(arg0, arg1, arg2) \
	__dtrace_libmtev___reverse__shutdown__permanent(arg0, arg1, arg2)
#ifndef	__sparc
#define	LIBMTEV_REVERSE_SHUTDOWN_PERMANENT_ENABLED() \
	__dtraceenabled_libmtev___reverse__shutdown__permanent()
#else
#define	LIBMTEV_REVERSE_SHUTDOWN_PERMANENT_ENABLED() \
	__dtraceenabled_libmtev___reverse__shutdown__permanent(0)
#endif
#define LIBMTEV_INTERN_POOL_FIND_ENTRY(arg0, arg1) \
        __dtrace_libmtev___intern__pool__find__entry(arg0, arg1)
#ifndef __sparc
#define LIBMTEV_INTERN_POOL_FIND_ENTRY_ENABLED() \
        __dtraceenabled_libmtev___intern__pool__find__entry()
#else
#define LIBMTEV_INTERN_POOL_FIND_ENTRY_ENABLED() \
        __dtraceenabled_libmtev___intern__pool__find__entry(0)
#endif
#define LIBMTEV_INTERN_POOL_FIND_RETURN(arg0, arg1) \
        __dtrace_libmtev___intern__pool__find__return(arg0, arg1)
#ifndef __sparc
#define LIBMTEV_INTERN_POOL_FIND_RETURN_ENABLED() \
        __dtraceenabled_libmtev___intern__pool__find__return()
#else
#define LIBMTEV_INTERN_POOL_FIND_RETURN_ENABLED() \
        __dtraceenabled_libmtev___intern__pool__find__return(0)
#endif
#define LIBMTEV_INTERN_POOL_EXTEND(arg0, arg1) \
        __dtrace_libmtev___intern__pool__extend(arg0, arg1)
#ifndef __sparc
#define LIBMTEV_INTERN_POOL_EXTEND_ENABLED() \
        __dtraceenabled_libmtev___intern__pool__extend()
#else
#define LIBMTEV_INTERN_POOL_EXTEND_ENABLED() \
        __dtraceenabled_libmtev___intern__pool__extend(0)
#endif


extern void __dtrace_libmtev___eventer__accept__entry(int, void *, int, int, void *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__accept__entry(void);
#else
extern int __dtraceenabled_libmtev___eventer__accept__entry(long);
#endif
extern void __dtrace_libmtev___eventer__accept__return(int, void *, int, int, void *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__accept__return(void);
#else
extern int __dtraceenabled_libmtev___eventer__accept__return(long);
#endif
extern void __dtrace_libmtev___eventer__callback__entry(void *, void *, char *, int, int, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__callback__entry(void);
#else
extern int __dtraceenabled_libmtev___eventer__callback__entry(long);
#endif
extern void __dtrace_libmtev___eventer__callback__return(void *, void *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__callback__return(void);
#else
extern int __dtraceenabled_libmtev___eventer__callback__return(long);
#endif
extern void __dtrace_libmtev___eventer__close__entry(int, int, void *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__close__entry(void);
#else
extern int __dtraceenabled_libmtev___eventer__close__entry(long);
#endif
extern void __dtrace_libmtev___eventer__close__return(int, int, void *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__close__return(void);
#else
extern int __dtraceenabled_libmtev___eventer__close__return(long);
#endif
extern void __dtrace_libmtev___eventer__read__entry(int, char *, size_t, int, void *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__read__entry(void);
#else
extern int __dtraceenabled_libmtev___eventer__read__entry(long);
#endif
extern void __dtrace_libmtev___eventer__read__return(int, char *, size_t, int, void *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__read__return(void);
#else
extern int __dtraceenabled_libmtev___eventer__read__return(long);
#endif
extern void __dtrace_libmtev___eventer__write__entry(int, char *, size_t, int, void *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__write__entry(void);
#else
extern int __dtraceenabled_libmtev___eventer__write__entry(long);
#endif
extern void __dtrace_libmtev___eventer__write__return(int, char *, size_t, int, void *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___eventer__write__return(void);
#else
extern int __dtraceenabled_libmtev___eventer__write__return(long);
#endif
extern void __dtrace_libmtev___http__accept(int, struct mtev_http_session_ctx *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___http__accept(void);
#else
extern int __dtraceenabled_libmtev___http__accept(long);
#endif
extern void __dtrace_libmtev___http__close(int, struct mtev_http_session_ctx *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___http__close(void);
#else
extern int __dtraceenabled_libmtev___http__close(long);
#endif
extern void __dtrace_libmtev___http__log(int, struct mtev_http_session_ctx *, char *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___http__log(void);
#else
extern int __dtraceenabled_libmtev___http__log(long);
#endif
extern void __dtrace_libmtev___http__request__finish(int, struct mtev_http_session_ctx *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___http__request__finish(void);
#else
extern int __dtraceenabled_libmtev___http__request__finish(long);
#endif
extern void __dtrace_libmtev___http__request__start(int, struct mtev_http_session_ctx *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___http__request__start(void);
#else
extern int __dtraceenabled_libmtev___http__request__start(long);
#endif
extern void __dtrace_libmtev___http__response__finish(int, struct mtev_http_session_ctx *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___http__response__finish(void);
#else
extern int __dtraceenabled_libmtev___http__response__finish(long);
#endif
extern void __dtrace_libmtev___http__response__start(int, struct mtev_http_session_ctx *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___http__response__start(void);
#else
extern int __dtraceenabled_libmtev___http__response__start(long);
#endif
extern void __dtrace_libmtev___log(char *, char *, int, char *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___log(void);
#else
extern int __dtraceenabled_libmtev___log(long);
#endif
extern void __dtrace_libmtev___reverse__connect(int, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__connect(void);
#else
extern int __dtraceenabled_libmtev___reverse__connect(long);
#endif
extern void __dtrace_libmtev___reverse__connect__close(int, char *, char *, int, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__connect__close(void);
#else
extern int __dtraceenabled_libmtev___reverse__connect__close(long);
#endif
extern void __dtrace_libmtev___reverse__connect__failed(int, char *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__connect__failed(void);
#else
extern int __dtraceenabled_libmtev___reverse__connect__failed(long);
#endif
extern void __dtrace_libmtev___reverse__connect__ssl(int, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__connect__ssl(void);
#else
extern int __dtraceenabled_libmtev___reverse__connect__ssl(long);
#endif
extern void __dtrace_libmtev___reverse__connect__ssl__failed(int, char *, char *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__connect__ssl__failed(void);
#else
extern int __dtraceenabled_libmtev___reverse__connect__ssl__failed(long);
#endif
extern void __dtrace_libmtev___reverse__connect__ssl__success(int, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__connect__ssl__success(void);
#else
extern int __dtraceenabled_libmtev___reverse__connect__ssl__success(long);
#endif
extern void __dtrace_libmtev___reverse__connect__success(int, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__connect__success(void);
#else
extern int __dtraceenabled_libmtev___reverse__connect__success(long);
#endif
extern void __dtrace_libmtev___reverse__reschedule(int, char *, char *, int);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__reschedule(void);
#else
extern int __dtraceenabled_libmtev___reverse__reschedule(long);
#endif
extern void __dtrace_libmtev___reverse__shutdown__permanent(int, char *, char *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___reverse__shutdown__permanent(void);
#else
extern int __dtraceenabled_libmtev___reverse__shutdown__permanent(long);
#endif
extern void __dtrace_libmtev___intern__pool__find__entry(void *, size_t);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___intern__pool__find__entry(void);
#else
extern int __dtraceenabled_libmtev___intern__pool__find__entry(long);
#endif
extern void __dtrace_libmtev___intern__pool__find__return(void *);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___intern__pool__find__return(void);
#else
extern int __dtraceenabled_libmtev___intern__pool__find__return(long);
#endif
extern void __dtrace_libmtev___intern__pool__extend(void *, size_t);
#ifndef	__sparc
extern int __dtraceenabled_libmtev___intern__pool__extend(void);
#else
extern int __dtraceenabled_libmtev___intern__pool__extend(long);
#endif

#else

#define	LIBMTEV_EVENTER_ACCEPT_ENTRY(arg0, arg1, arg2, arg3, arg4)
#define	LIBMTEV_EVENTER_ACCEPT_ENTRY_ENABLED() (0)
#define	LIBMTEV_EVENTER_ACCEPT_RETURN(arg0, arg1, arg2, arg3, arg4, arg5)
#define	LIBMTEV_EVENTER_ACCEPT_RETURN_ENABLED() (0)
#define	LIBMTEV_EVENTER_CALLBACK_ENTRY(arg0, arg1, arg2, arg3, arg4, arg5)
#define	LIBMTEV_EVENTER_CALLBACK_ENTRY_ENABLED() (0)
#define	LIBMTEV_EVENTER_CALLBACK_RETURN(arg0, arg1, arg2, arg3)
#define	LIBMTEV_EVENTER_CALLBACK_RETURN_ENABLED() (0)
#define	LIBMTEV_EVENTER_CLOSE_ENTRY(arg0, arg1, arg2)
#define	LIBMTEV_EVENTER_CLOSE_ENTRY_ENABLED() (0)
#define	LIBMTEV_EVENTER_CLOSE_RETURN(arg0, arg1, arg2, arg3)
#define	LIBMTEV_EVENTER_CLOSE_RETURN_ENABLED() (0)
#define	LIBMTEV_EVENTER_READ_ENTRY(arg0, arg1, arg2, arg3, arg4)
#define	LIBMTEV_EVENTER_READ_ENTRY_ENABLED() (0)
#define	LIBMTEV_EVENTER_READ_RETURN(arg0, arg1, arg2, arg3, arg4, arg5)
#define	LIBMTEV_EVENTER_READ_RETURN_ENABLED() (0)
#define	LIBMTEV_EVENTER_WRITE_ENTRY(arg0, arg1, arg2, arg3, arg4)
#define	LIBMTEV_EVENTER_WRITE_ENTRY_ENABLED() (0)
#define	LIBMTEV_EVENTER_WRITE_RETURN(arg0, arg1, arg2, arg3, arg4, arg5)
#define	LIBMTEV_EVENTER_WRITE_RETURN_ENABLED() (0)
#define	LIBMTEV_HTTP_ACCEPT(arg0, arg1)
#define	LIBMTEV_HTTP_ACCEPT_ENABLED() (0)
#define	LIBMTEV_HTTP_CLOSE(arg0, arg1)
#define	LIBMTEV_HTTP_CLOSE_ENABLED() (0)
#define	LIBMTEV_HTTP_LOG(arg0, arg1, arg2)
#define	LIBMTEV_HTTP_LOG_ENABLED() (0)
#define	LIBMTEV_HTTP_REQUEST_FINISH(arg0, arg1)
#define	LIBMTEV_HTTP_REQUEST_FINISH_ENABLED() (0)
#define	LIBMTEV_HTTP_REQUEST_START(arg0, arg1)
#define	LIBMTEV_HTTP_REQUEST_START_ENABLED() (0)
#define	LIBMTEV_HTTP_RESPONSE_FINISH(arg0, arg1)
#define	LIBMTEV_HTTP_RESPONSE_FINISH_ENABLED() (0)
#define	LIBMTEV_HTTP_RESPONSE_START(arg0, arg1)
#define	LIBMTEV_HTTP_RESPONSE_START_ENABLED() (0)
#define	LIBMTEV_LOG(arg0, arg1, arg2, arg3)
#define	LIBMTEV_LOG_ENABLED() (0)
#define	LIBMTEV_REVERSE_CONNECT(arg0, arg1, arg2)
#define	LIBMTEV_REVERSE_CONNECT_ENABLED() (0)
#define	LIBMTEV_REVERSE_CONNECT_CLOSE(arg0, arg1, arg2, arg3, arg4)
#define	LIBMTEV_REVERSE_CONNECT_CLOSE_ENABLED() (0)
#define	LIBMTEV_REVERSE_CONNECT_FAILED(arg0, arg1, arg2, arg3)
#define	LIBMTEV_REVERSE_CONNECT_FAILED_ENABLED() (0)
#define	LIBMTEV_REVERSE_CONNECT_SSL(arg0, arg1, arg2)
#define	LIBMTEV_REVERSE_CONNECT_SSL_ENABLED() (0)
#define	LIBMTEV_REVERSE_CONNECT_SSL_FAILED(arg0, arg1, arg2, arg3, arg4)
#define	LIBMTEV_REVERSE_CONNECT_SSL_FAILED_ENABLED() (0)
#define	LIBMTEV_REVERSE_CONNECT_SSL_SUCCESS(arg0, arg1, arg2)
#define	LIBMTEV_REVERSE_CONNECT_SSL_SUCCESS_ENABLED() (0)
#define	LIBMTEV_REVERSE_CONNECT_SUCCESS(arg0, arg1, arg2)
#define	LIBMTEV_REVERSE_CONNECT_SUCCESS_ENABLED() (0)
#define	LIBMTEV_REVERSE_RESCHEDULE(arg0, arg1, arg2, arg3)
#define	LIBMTEV_REVERSE_RESCHEDULE_ENABLED() (0)
#define	LIBMTEV_REVERSE_SHUTDOWN_PERMANENT(arg0, arg1, arg2)
#define	LIBMTEV_REVERSE_SHUTDOWN_PERMANENT_ENABLED() (0)
#define	LIBMTEV_INTERN_POOL_FIND_ENTRY(arg0, arg1)
#define	LIBMTEV_INTERN_POOL_FIND_ENTRY_ENABLED() (0)
#define	LIBMTEV_INTERN_POOL_FIND_RETURN(arg0)
#define	LIBMTEV_INTERN_POOL_FIND_RETURN_ENABLED() (0)
#define	LIBMTEV_INTERN_POOL_EXTEND(arg0, arg1)
#define	LIBMTEV_INTERN_POOL_EXTEND_ENABLED() (0)

#endif


#ifdef	__cplusplus
}
#endif

#endif	/* _LIBMTEV_DTRACE_PROBES_H */
