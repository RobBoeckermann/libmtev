.NOTPARALLEL:

Q=
ifeq ($(V),)
	Q=@
endif

CC=@CC@
CPPFLAGS=@CPPFLAGS@ -DHIDE_EVENTER_ABI -I../src/utils -I../src -I../src/json-lib
CFLAGS=@CFLAGS@
LDFLAGS=@LDFLAGS@
AR=@AR@
RANLIB=@RANLIB@
LIBS=@LIBS@
PGLIBS=@PGLIBS@
INSTALL=@INSTALL@
MODULES_DIR=@MODULES_DIR@
LIBMTEV_LIBS=@LIBMTEV_LIBS@
UNWINDLIB=@UNWINDLIB@

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
libdir=@libdir@
includedir=@includedir@
libexecdir=@libexecdir@
datarootdir = @datarootdir@
mandir=@mandir@
mansubdir=@mansubdir@
docdir=${prefix}/@docdir@
sysconfdir=@sysconfdir@
srcdir=@srcdir@
top_srcdir=@top_srcdir@

LD_LIBRARY_PATH=`pwd`/../src
TESTHARNESS_OBJS=test_harness.o
LUAROCKS=@LUAROCKS@
LUAROCKS_PATH=@LUAROCKS_PATH@
LUA_FILES=mtevbusted/init.lua mtevbusted/cli.lua mtevbusted/api.lua mtevbusted/child.lua

all:	geturllz4f check

TESTS=smr_test intern_test frrh_test uuid_test time_test hll_test maybe_alloc_test dyn_buffer_test speculatelog_test lru_test lfu_test pool-shift-async/test flowreg/test async-pingpong/test subqueues/test

geturllz4f:	geturllz4f.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS) -lcurl

async-pingpong/test:	async-pingpong/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)


pool-shift-async/test:	pool-shift-async/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

flowreg/test:	flowreg/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

subqueues/test:	subqueues/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

smr_test: smr_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

intern_test: intern_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

frrh_test: frrh_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

hash_test: hash_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

huge_hash_test: huge_hash_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

uuid_test: uuid_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS) -luuid

time_test: time_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

sort_test: sort_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

hll_test: hll_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

maybe_alloc_test: maybe_alloc_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

dyn_buffer_test: dyn_buffer_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

speculatelog_test: speculatelog_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $? -lmtev $(LIBMTEV_LIBS)

lru_test: lru_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o lru_test lru_test.c -lmtev $(LIBMTEV_LIBS)

lfu_test: lfu_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o lfu_test lfu_test.c -lmtev $(LIBMTEV_LIBS)

.c.o:
	@echo "- compiling $<"
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -c $<

test_http_server: test_http_server.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

test_harness:       $(TESTHARNESS_OBJS)
	@echo "- linking $@"
	$(Q)$(CC) -L../src $(LDFLAGS) $(UNWINDLIB) -o $@ $(TESTHARNESS_OBJS) $(LIBS) -lmtev

check-lua: test_http_server testcerts
	@echo
	@echo "Running luajit-based tests via test_harness..."
	$(Q)_DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) LD_LIBRARY_PATH=$(LD_LIBRARY_PATH) _LD_PRELOAD=`pwd`/../src/libmtev@DOTSO@ LUA_PATH="$(LUAROCKS_PATH)" ./mtevbusted-wrapper.sh

check-standalone: $(TESTS)
	@echo
	@echo "Running other tests via script..."
	$(Q)_DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) LD_LIBRARY_PATH=$(LD_LIBRARY_PATH) _LD_PRELOAD=`pwd`/../src/libmtev@DOTSO@ ./run_standalone_tests.sh $(TESTS)

install:	mtevbusted-script
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(bindir)
	$(INSTALL) -m 0755 mtevbusted-script $(DESTDIR)$(bindir)/mtevbusted
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(MODULES_DIR)/lua/mtevbusted
	for lua in $(LUA_FILES); do \
		$(INSTALL) -m 0755 $$lua $(DESTDIR)$(MODULES_DIR)/lua/$$lua ; \
	done

check:	check-standalone check-lua

.PHONY:	demoCA-dir
demoCA-dir:
	@mkdir -p demoCA
	@touch demoCA/index.txt
	@test -f demoCA/serial || echo 00 > demoCA/serial

testcerts:	demoCA-dir test-ca.crt test-server.crt

test-ca.key:
	openssl genrsa -out test-ca.key 4096

test-ca.csr:    test-ca.key
	openssl req -sha256 -key test-ca.key -days 365 -new -out test-ca.csr -config demo-openssl.cnf -extensions v3_ca -subj "/C=US/ST=Maryland/O=Circonus Labs/CN=Sample CA"

test-ca.crt:    test-ca.key test-ca.csr
	openssl x509 -sha256 -req -in test-ca.csr -signkey test-ca.key -out test-ca.crt -extfile demo-openssl.cnf -extensions v3_ca -days 365

test-server.key:
	openssl genrsa -out test-server.key 2048

test-server.csr:  test-server.key
	openssl req -sha256 -key test-server.key -days 365 -new -out test-server.csr -config demo-openssl.cnf -subj "/C=US/ST=Maryland/O=Circonus Labs/CN=test-server"

test-server.crt:  test-server.csr test-ca.key test-ca.crt
	openssl ca -batch -config demo-openssl.cnf -in test-server.csr -out test-server.crt -outdir . -keyfile test-ca.key -cert test-ca.crt -days 120

clean:
	rm -f $(TESTS) geturllz4f
	rm -rf demoCA
	rm -f *.key *.crt *.csr *.pem
